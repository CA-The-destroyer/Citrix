# ==== Inputs (fill these; no angle brackets) ====
$base = "https://api-us.cloud.com"            # use the SAME region you used for the token: api-us / api-eu / api-ap-s / api.citrixcloud.jp
$cid  = "<ClientId>"
$sec  = "<ClientSecret>"

# If you don't trust $cust, pull it from the token payload instead of guessing:
function Get-CitrixToken {
  param($Base,$Cust,$CID,$SEC)
  Invoke-RestMethod -Method Post -Uri "$Base/cctrustoauth2/$Cust/tokens/clients" -ContentType "application/x-www-form-urlencoded" -Body "grant_type=client_credentials&client_id=$CID&client_secret=$SEC"
}

# If you already discovered a GUID, set it here; otherwise this will be fixed after first token call.
$cust = "<CustomerId-GUID>"

# Guard: must be a GUID 8-4-4-4-12
if ($cust -notmatch '^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$') {
  Write-Host "CustomerId not a GUID; extracting from token payload..." -ForegroundColor Yellow
  # We need *some* GUID to get a token. If you used a placeholder before, stop and paste the real GUID here.
  throw "Set `$cust to your real CustomerId GUID (not org short name)."
}

# 1) Get token
$tok = Get-CitrixToken -Base $base -Cust $cust -CID $cid -SEC $sec
$auth = if ($tok.token_type) { "$($tok.token_type) $($tok.access_token)" } else { "Bearer $($tok.access_token)" }
Write-Host "token_type=$($tok.token_type) expires_in=$($tok.expires_in)" -ForegroundColor Cyan

# Build URLs
$odataUrl = "$base/monitorodata/$cust/v4/data/Machines?`$top=1000"
$odataRoot= "$base/monitorodata/$cust/v4/data"
$daasUrl  = "$base/cvad/manage/Machines?`$top=1000"

Write-Host "OData root  -> $odataRoot"
Write-Host "OData call  -> $odataUrl"
Write-Host "DaaS manage -> $daasUrl"

# 2) Probe OData root first (lists entities) with Citrix-CustomerId
try {
  $h = @{ Authorization = $auth; "Citrix-CustomerId" = $cust; Accept = "application/json" }
  Write-Host "`n[Probe] GET OData root with Citrix-CustomerId..." -ForegroundColor Green
  $root = Invoke-RestMethod -Method Get -Uri $odataRoot -Headers $h
  Write-Host "OData root OK. Entities available." -ForegroundColor Green
} catch {
  Write-Host "OData root failed: $($_.Exception.Message)" -ForegroundColor Yellow
}

# 3) Try Machines with Citrix-CustomerId
try {
  Write-Host "`n[Try #1] OData Machines with Citrix-CustomerId..." -ForegroundColor Green
  $data = Invoke-RestMethod -Method Get -Uri $odataUrl -Headers $h
  $data | ConvertTo-Json -Depth 6 | Out-File .\machines.json -Encoding utf8
  Write-Host "Wrote machines.json (first page)." -ForegroundColor Green
  return
} catch {
  Write-Host "[Try #1] failed: $($_.Exception.Message)" -ForegroundColor Yellow
}

# 4) Try Machines with Citrix-Cloud-CustomerId (alternate header some tenants require)
try {
  Write-Host "`n[Try #2] OData Machines with Citrix-Cloud-CustomerId..." -ForegroundColor Green
  $h2 = @{ Authorization = $auth; "Citrix-Cloud-CustomerId" = $cust; Accept = "application/json" }
  $data2 = Invoke-RestMethod -Method Get -Uri $odataUrl -Headers $h2
  $data2 | ConvertTo-Json -Depth 6 | Out-File .\machines.json -Encoding utf8
  Write-Host "Wrote machines.json (first page) using Citrix-Cloud-CustomerId." -ForegroundColor Green
  return
} catch {
  Write-Host "[Try #2] failed: $($_.Exception.Message)" -ForegroundColor Yellow
}

# 5) Fallback: DaaS REST Machines (proves auth/org even if Monitor OData isn’t enabled)
try {
  Write-Host "`n[Try #3] DaaS REST Machines..." -ForegroundColor Green
  $m = Invoke-RestMethod -Method Get -Uri $daasUrl -Headers $h
  $m | ConvertTo-Json -Depth 6 | Out-File .\machines_admin.json -Encoding utf8
  Write-Host "Wrote machines_admin.json from DaaS REST." -ForegroundColor Green
} catch {
  Write-Host "[Try #3] failed: $($_.Exception.Message)" -ForegroundColor Red
}



######################
# Assume you already have the token response in $tok (with .access_token)
$jwt = $tok.access_token

# Base64url → JSON payload
$mid = ($jwt -split '\.')[1]
$pad = 4 - ($mid.Length % 4); if ($pad -lt 4) { $mid = $mid + ('=' * $pad) }
$mid = $mid.Replace('-', '+').Replace('_', '/')
$payloadJson = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($mid))
$payload = $payloadJson | ConvertFrom-Json

# 1) Try common claim names
$cust = $payload.customerId
if (-not $cust) { $cust = $payload.tenantId }
if (-not $cust) { $cust = $payload.tid }
if (-not $cust) { $cust = $payload.orgId }
if (-not $cust) {
  # 2) Fallback: pull the first GUID-looking value from the payload
  $m = [regex]::Matches($payloadJson,'[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}')
  if ($m.Count -gt 0) { $cust = $m[0].Value }
}

if (-not $cust) { throw "Couldn't find a Customer ID GUID in the token payload.`nPayload: $payloadJson" }
"CustomerId (GUID) detected: $cust"
#######################################
$base = "https://api-us.cloud.com"  # your region
Invoke-RestMethod -Uri "$base/monitorodata/$cust/v4/data/Machines?`$top=1000" `
  -Headers @{ Authorization = "Bearer $($tok.access_token)"; "Citrix-CustomerId" = $cust; Accept = "application/json" } `
  -Method Get | ConvertTo-Json -Depth 6 | Out-File .\machines.json -Encoding utf8




#######################################
  # Sanity check
"cust=[$cust]"
# Must look like 8-4-4-4-12 hex
if ($cust -notmatch '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$') {
  throw "CustomerId is invalid: '$cust'. Paste the GUID (no angle brackets, no org name)."
}


$base = "https://api-us.cloud.com"         # your region
$tokenUri = "$base/cctrustoauth2/$cust/tokens/clients"
$odataUri = "$base/monitorodata/$cust/v4/data/Machines?`$top=1000"
"POST -> $tokenUri"; "GET -> $odataUri"



$tok = Invoke-RestMethod -Method Post -Uri $tokenUri -ContentType "application/x-www-form-urlencoded" -Body "grant_type=client_credentials&client_id=$cid&client_secret=$sec"
Invoke-RestMethod -Method Get -Uri $odataUri -Headers @{ Authorization = "Bearer $($tok.access_token)"; "Citrix-CustomerId" = $cust; Accept = "application/json" } | ConvertTo-Json -Depth 6 | Out-File .\machines.json -Encoding utf8





Invoke-RestMethod -Uri "https://api-us.cloud.com/monitorodata/<CustomerId>/v4/data/Machines?`$top=1000" -Headers @{Authorization="CwsAuth bearer <ACCESS_TOKEN>";"Citrix-CustomerId"="<CustomerId>";Accept="application/json"} -Method Get | ConvertTo-Json -Depth 6 | Out-File .\machines.json -Encoding utf8



Invoke-RestMethod -Uri "$base/monitorodata/$cust/v4/data/Machines?`$top=1000" `
  -Headers @{ Authorization = "bearer $($tok.access_token)"; "Citrix-CustomerId" = $cust; Accept = "application/json" } `
  -Method Get


Invoke-RestMethod -Uri "$base/monitorodata/$cust/v4/data/Machines?`$top=1000" `
  -Headers @{ Authorization = "Bearer $($tok.access_token)"; "Citrix-CustomerId" = $cust; Accept = "application/json" } `
  -Method Get | ConvertTo-Json -Depth 6 | Out-File .\machines.json -Encoding utf8

##########################

# ==== Setup ====
$base = "https://api-us.cloud.com"   # or api-eu / api-ap-s / api.citrixcloud.jp
$cust = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"   # your real CustomerId GUID
$cid  = "your-client-id"
$sec  = "your-client-secret"

# ==== Get bearer token ====
$tok = Invoke-RestMethod -Method Post -Uri "$base/cctrustoauth2/$cust/tokens/clients" `
  -ContentType "application/x-www-form-urlencoded" `
  -Body "grant_type=client_credentials&client_id=$cid&client_secret=$sec"

# ==== Use it to pull machines (first 1000) ====
Invoke-RestMethod -Uri "$base/monitorodata/$cust/v4/data/Machines?`$top=1000" `
  -Headers @{ Authorization = "Bearer $($tok.access_token)"; "Citrix-CustomerId" = $cust; Accept = "application/json" } `
  -Method Get | ConvertTo-Json -Depth 6 | Out-File .\machines.json -Encoding utf8


##############################
Cust ID check
##############################
$base="https://api-us.cloud.com"
$cust="<suspected-GUID>"
$cid="<ClientId>"
$sec="<ClientSecret>"

$tok = Invoke-RestMethod -Method Post -Uri "$base/cctrustoauth2/$cust/tokens/clients" `
  -ContentType "application/x-www-form-urlencoded" `
  -Body "grant_type=client_credentials&client_id=$cid&client_secret=$sec"

if ($tok.access_token) {
    Write-Host "CustomerId is valid for this tenant." -ForegroundColor Green
} else {
    Write-Host "CustomerId failed to authenticate." -ForegroundColor Red
}



